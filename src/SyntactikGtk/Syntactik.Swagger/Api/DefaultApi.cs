/* 
 * Malina licensing service
 *
 * Malina licensing service
 *
 * OpenAPI spec version: 1.0.0
 * Contact: Maxim.Trushin@syntactik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Checks if Lead Info has confirmed email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">leads email</param>
        /// <returns>int?</returns>
        int? LeadIsConfirmed (string email);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Checks if Lead Info has confirmed email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">leads email</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> LeadIsConfirmedWithHttpInfo (string email);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Checks if Lead Info has confirmed email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">leads email</param>
        /// <param name="machineId">machine Id</param>
        /// <param name="machineName">network name</param>
        /// <returns>LicenseInfo</returns>
        LicenseInfo RequestLicense (string email, string machineId, string machineName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Checks if Lead Info has confirmed email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">leads email</param>
        /// <param name="machineId">machine Id</param>
        /// <param name="machineName">network name</param>
        /// <returns>ApiResponse of LicenseInfo</returns>
        ApiResponse<LicenseInfo> RequestLicenseWithHttpInfo (string email, string machineId, string machineName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds Lead to DB and campaign
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">lead&#39;s email</param>
        /// <param name="name">lead&#39;s name</param>
        /// <param name="position">lead&#39;s position</param>
        /// <param name="company">lead&#39;s company</param>
        /// <param name="machineId">machine Id</param>
        /// <returns>string</returns>
        string SignupLead (string email, string name, string position, string company, string machineId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds Lead to DB and campaign
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">lead&#39;s email</param>
        /// <param name="name">lead&#39;s name</param>
        /// <param name="position">lead&#39;s position</param>
        /// <param name="company">lead&#39;s company</param>
        /// <param name="machineId">machine Id</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SignupLeadWithHttpInfo (string email, string name, string position, string company, string machineId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Checks if Lead Info has confirmed email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">leads email</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> LeadIsConfirmedAsync (string email);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Checks if Lead Info has confirmed email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">leads email</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> LeadIsConfirmedAsyncWithHttpInfo (string email);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Checks if Lead Info has confirmed email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">leads email</param>
        /// <param name="machineId">machine Id</param>
        /// <param name="machineName">network name</param>
        /// <returns>Task of LicenseInfo</returns>
        System.Threading.Tasks.Task<LicenseInfo> RequestLicenseAsync (string email, string machineId, string machineName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Checks if Lead Info has confirmed email
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">leads email</param>
        /// <param name="machineId">machine Id</param>
        /// <param name="machineName">network name</param>
        /// <returns>Task of ApiResponse (LicenseInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<LicenseInfo>> RequestLicenseAsyncWithHttpInfo (string email, string machineId, string machineName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds Lead to DB and campaign
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">lead&#39;s email</param>
        /// <param name="name">lead&#39;s name</param>
        /// <param name="position">lead&#39;s position</param>
        /// <param name="company">lead&#39;s company</param>
        /// <param name="machineId">machine Id</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SignupLeadAsync (string email, string name, string position, string company, string machineId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds Lead to DB and campaign
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">lead&#39;s email</param>
        /// <param name="name">lead&#39;s name</param>
        /// <param name="position">lead&#39;s position</param>
        /// <param name="company">lead&#39;s company</param>
        /// <param name="machineId">machine Id</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SignupLeadAsyncWithHttpInfo (string email, string name, string position, string company, string machineId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Checks if Lead Info has confirmed email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">leads email</param>
        /// <returns>int?</returns>
        public int? LeadIsConfirmed (string email)
        {
             ApiResponse<int?> localVarResponse = LeadIsConfirmedWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Checks if Lead Info has confirmed email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">leads email</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > LeadIsConfirmedWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling DefaultApi->LeadIsConfirmed");

            var localVarPath = "/leadIsConfirmed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIsConfirmed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        ///  Checks if Lead Info has confirmed email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">leads email</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> LeadIsConfirmedAsync (string email)
        {
             ApiResponse<int?> localVarResponse = await LeadIsConfirmedAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Checks if Lead Info has confirmed email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">leads email</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> LeadIsConfirmedAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling DefaultApi->LeadIsConfirmed");

            var localVarPath = "/leadIsConfirmed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIsConfirmed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        ///  Checks if Lead Info has confirmed email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">leads email</param>
        /// <param name="machineId">machine Id</param>
        /// <param name="machineName">network name</param>
        /// <returns>LicenseInfo</returns>
        public LicenseInfo RequestLicense (string email, string machineId, string machineName)
        {
             ApiResponse<LicenseInfo> localVarResponse = RequestLicenseWithHttpInfo(email, machineId, machineName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Checks if Lead Info has confirmed email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">leads email</param>
        /// <param name="machineId">machine Id</param>
        /// <param name="machineName">network name</param>
        /// <returns>ApiResponse of LicenseInfo</returns>
        public ApiResponse< LicenseInfo > RequestLicenseWithHttpInfo (string email, string machineId, string machineName)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling DefaultApi->RequestLicense");
            // verify the required parameter 'machineId' is set
            if (machineId == null)
                throw new ApiException(400, "Missing required parameter 'machineId' when calling DefaultApi->RequestLicense");
            // verify the required parameter 'machineName' is set
            if (machineName == null)
                throw new ApiException(400, "Missing required parameter 'machineName' when calling DefaultApi->RequestLicense");

            var localVarPath = "/requestLicense";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (machineId != null) localVarQueryParams.Add("machineId", Configuration.ApiClient.ParameterToString(machineId)); // query parameter
            if (machineName != null) localVarQueryParams.Add("machineName", Configuration.ApiClient.ParameterToString(machineName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestLicense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LicenseInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LicenseInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LicenseInfo)));
            
        }

        /// <summary>
        ///  Checks if Lead Info has confirmed email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">leads email</param>
        /// <param name="machineId">machine Id</param>
        /// <param name="machineName">network name</param>
        /// <returns>Task of LicenseInfo</returns>
        public async System.Threading.Tasks.Task<LicenseInfo> RequestLicenseAsync (string email, string machineId, string machineName)
        {
             ApiResponse<LicenseInfo> localVarResponse = await RequestLicenseAsyncWithHttpInfo(email, machineId, machineName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Checks if Lead Info has confirmed email
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">leads email</param>
        /// <param name="machineId">machine Id</param>
        /// <param name="machineName">network name</param>
        /// <returns>Task of ApiResponse (LicenseInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LicenseInfo>> RequestLicenseAsyncWithHttpInfo (string email, string machineId, string machineName)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling DefaultApi->RequestLicense");
            // verify the required parameter 'machineId' is set
            if (machineId == null)
                throw new ApiException(400, "Missing required parameter 'machineId' when calling DefaultApi->RequestLicense");
            // verify the required parameter 'machineName' is set
            if (machineName == null)
                throw new ApiException(400, "Missing required parameter 'machineName' when calling DefaultApi->RequestLicense");

            var localVarPath = "/requestLicense";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (machineId != null) localVarQueryParams.Add("machineId", Configuration.ApiClient.ParameterToString(machineId)); // query parameter
            if (machineName != null) localVarQueryParams.Add("machineName", Configuration.ApiClient.ParameterToString(machineName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestLicense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LicenseInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LicenseInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LicenseInfo)));
            
        }

        /// <summary>
        ///  Adds Lead to DB and campaign
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">lead&#39;s email</param>
        /// <param name="name">lead&#39;s name</param>
        /// <param name="position">lead&#39;s position</param>
        /// <param name="company">lead&#39;s company</param>
        /// <param name="machineId">machine Id</param>
        /// <returns>string</returns>
        public string SignupLead (string email, string name, string position, string company, string machineId)
        {
             ApiResponse<string> localVarResponse = SignupLeadWithHttpInfo(email, name, position, company, machineId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Adds Lead to DB and campaign
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">lead&#39;s email</param>
        /// <param name="name">lead&#39;s name</param>
        /// <param name="position">lead&#39;s position</param>
        /// <param name="company">lead&#39;s company</param>
        /// <param name="machineId">machine Id</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SignupLeadWithHttpInfo (string email, string name, string position, string company, string machineId)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling DefaultApi->SignupLead");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling DefaultApi->SignupLead");
            // verify the required parameter 'position' is set
            if (position == null)
                throw new ApiException(400, "Missing required parameter 'position' when calling DefaultApi->SignupLead");
            // verify the required parameter 'company' is set
            if (company == null)
                throw new ApiException(400, "Missing required parameter 'company' when calling DefaultApi->SignupLead");
            // verify the required parameter 'machineId' is set
            if (machineId == null)
                throw new ApiException(400, "Missing required parameter 'machineId' when calling DefaultApi->SignupLead");

            var localVarPath = "/signupLead";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (position != null) localVarQueryParams.Add("position", Configuration.ApiClient.ParameterToString(position)); // query parameter
            if (company != null) localVarQueryParams.Add("company", Configuration.ApiClient.ParameterToString(company)); // query parameter
            if (machineId != null) localVarQueryParams.Add("machineId", Configuration.ApiClient.ParameterToString(machineId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignupLead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  Adds Lead to DB and campaign
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">lead&#39;s email</param>
        /// <param name="name">lead&#39;s name</param>
        /// <param name="position">lead&#39;s position</param>
        /// <param name="company">lead&#39;s company</param>
        /// <param name="machineId">machine Id</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SignupLeadAsync (string email, string name, string position, string company, string machineId)
        {
             ApiResponse<string> localVarResponse = await SignupLeadAsyncWithHttpInfo(email, name, position, company, machineId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Adds Lead to DB and campaign
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">lead&#39;s email</param>
        /// <param name="name">lead&#39;s name</param>
        /// <param name="position">lead&#39;s position</param>
        /// <param name="company">lead&#39;s company</param>
        /// <param name="machineId">machine Id</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SignupLeadAsyncWithHttpInfo (string email, string name, string position, string company, string machineId)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling DefaultApi->SignupLead");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling DefaultApi->SignupLead");
            // verify the required parameter 'position' is set
            if (position == null)
                throw new ApiException(400, "Missing required parameter 'position' when calling DefaultApi->SignupLead");
            // verify the required parameter 'company' is set
            if (company == null)
                throw new ApiException(400, "Missing required parameter 'company' when calling DefaultApi->SignupLead");
            // verify the required parameter 'machineId' is set
            if (machineId == null)
                throw new ApiException(400, "Missing required parameter 'machineId' when calling DefaultApi->SignupLead");

            var localVarPath = "/signupLead";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (position != null) localVarQueryParams.Add("position", Configuration.ApiClient.ParameterToString(position)); // query parameter
            if (company != null) localVarQueryParams.Add("company", Configuration.ApiClient.ParameterToString(company)); // query parameter
            if (machineId != null) localVarQueryParams.Add("machineId", Configuration.ApiClient.ParameterToString(machineId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignupLead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

    }
}
