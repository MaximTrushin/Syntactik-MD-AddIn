/* 
 * Malina licensing service
 *
 * Malina licensing service
 *
 * OpenAPI spec version: 1.0.0
 * Contact: Maxim.Trushin@syntactik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LicenseInfo
    /// </summary>
    [DataContract]
    public partial class LicenseInfo :  IEquatable<LicenseInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseInfo" /> class.
        /// </summary>
        /// <param name="Uid">Uid.</param>
        /// <param name="Type">Type.</param>
        /// <param name="License">License.</param>
        /// <param name="ExpiresAt">ExpiresAt.</param>
        /// <param name="Confirmed">Confirmed.</param>
        /// <param name="ErrorMessage">ErrorMessage.</param>
        /// <param name="Valid">Valid.</param>
        public LicenseInfo(string Uid = default(string), string Type = default(string), string License = default(string), DateTime? ExpiresAt = default(DateTime?), bool? Confirmed = default(bool?), string ErrorMessage = default(string), bool? Valid = default(bool?))
        {
            this.Uid = Uid;
            this.Type = Type;
            this.License = License;
            this.ExpiresAt = ExpiresAt;
            this.Confirmed = Confirmed;
            this.ErrorMessage = ErrorMessage;
            this.Valid = Valid;
        }
        
        /// <summary>
        /// Gets or Sets Uid
        /// </summary>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public string Uid { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets License
        /// </summary>
        [DataMember(Name="license", EmitDefaultValue=false)]
        public string License { get; set; }
        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [DataMember(Name="expiresAt", EmitDefaultValue=false)]
        public DateTime? ExpiresAt { get; set; }
        /// <summary>
        /// Gets or Sets Confirmed
        /// </summary>
        [DataMember(Name="confirmed", EmitDefaultValue=false)]
        public bool? Confirmed { get; set; }
        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name="errorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }
        /// <summary>
        /// Gets or Sets Valid
        /// </summary>
        [DataMember(Name="valid", EmitDefaultValue=false)]
        public bool? Valid { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LicenseInfo {\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Confirmed: ").Append(Confirmed).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LicenseInfo);
        }

        /// <summary>
        /// Returns true if LicenseInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of LicenseInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LicenseInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Uid == other.Uid ||
                    this.Uid != null &&
                    this.Uid.Equals(other.Uid)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.License == other.License ||
                    this.License != null &&
                    this.License.Equals(other.License)
                ) && 
                (
                    this.ExpiresAt == other.ExpiresAt ||
                    this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(other.ExpiresAt)
                ) && 
                (
                    this.Confirmed == other.Confirmed ||
                    this.Confirmed != null &&
                    this.Confirmed.Equals(other.Confirmed)
                ) && 
                (
                    this.ErrorMessage == other.ErrorMessage ||
                    this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(other.ErrorMessage)
                ) && 
                (
                    this.Valid == other.Valid ||
                    this.Valid != null &&
                    this.Valid.Equals(other.Valid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Uid != null)
                    hash = hash * 59 + this.Uid.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.License != null)
                    hash = hash * 59 + this.License.GetHashCode();
                if (this.ExpiresAt != null)
                    hash = hash * 59 + this.ExpiresAt.GetHashCode();
                if (this.Confirmed != null)
                    hash = hash * 59 + this.Confirmed.GetHashCode();
                if (this.ErrorMessage != null)
                    hash = hash * 59 + this.ErrorMessage.GetHashCode();
                if (this.Valid != null)
                    hash = hash * 59 + this.Valid.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
